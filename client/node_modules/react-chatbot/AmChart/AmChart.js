'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _amcharts3React = require('@amcharts/amcharts3-react');

var _amcharts3React2 = _interopRequireDefault(_amcharts3React);

var _ChartConfigUtil = require('./ChartConfigUtil');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var chartWrapper = {
  minWidth: '100%',
  position: 'relative'
};

/**
 * Chart component which uses AmCharts lib for charts. Line, Bar and Pie chart are supported now.
 * Include the AmChart lib files in the index.html page. For more info, please refer AmCharts site/docs.
 */

var Chart = function (_PureComponent) {
  _inherits(Chart, _PureComponent);

  function Chart() {
    _classCallCheck(this, Chart);

    return _possibleConstructorReturn(this, (Chart.__proto__ || Object.getPrototypeOf(Chart)).apply(this, arguments));
  }

  _createClass(Chart, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          _props$data = _props.data,
          chartData = _props$data.chartData,
          xAxisField = _props$data.xAxisField,
          yAxisFields = _props$data.yAxisFields,
          type = _props.type;

      var getConfig = _ChartConfigUtil.CONFIG_MAP[type];
      var config = {};
      var showNoData = false;
      if (getConfig && getConfig instanceof Function) {
        config = getConfig(chartData, xAxisField, yAxisFields);
      } else {
        showNoData = true;
      }

      var chartNodeStyles = {
        height: config.height + 'px',
        minWidth: '100%',
        backgroundColor: '#ffffff'
      };

      return _react2.default.createElement(
        'div',
        { style: chartWrapper },
        showNoData ? _react2.default.createElement(
          'div',
          null,
          'No Data'
        ) : _react2.default.createElement(_amcharts3React2.default.React, { options: config, style: chartNodeStyles })
      );
    }
  }]);

  return Chart;
}(_react.PureComponent);

Chart.displayName = 'Chart';

Chart.propTypes = {
  /**
   * Data points for plotting the chart
   */
  data: _propTypes2.default.object.isRequired,
  /**
   * Type of the chart to be plotted
   */
  type: _propTypes2.default.string.isRequired
};

exports.default = Chart;