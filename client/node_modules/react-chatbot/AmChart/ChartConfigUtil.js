'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CONFIG_MAP = undefined;

var _CONFIG_MAP;

var _types = require('../types');

var _types2 = _interopRequireDefault(_types);

var _numeral = require('numeral');

var _numeral2 = _interopRequireDefault(_numeral);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

_numeral2.default.locales.en.abbreviations = {
  thousand: 'K',
  million: 'M',
  billion: 'B',
  trillion: 'T'
};

// eslint-disable-next-line
String.prototype.capitalizeFirstLetter = function () {
  return this.charAt(0).toUpperCase() + this.slice(1).toLowerCase();
};

// eslint-enable-next-line
var PIECHART_CONFIG = {
  type: 'pie',
  theme: 'light',
  autoMargins: false,
  marginTop: 0,
  marginBottom: 0,
  marginLeft: 10,
  marginRight: 10,
  pullOutRadius: 10,
  labelsEnabled: false,
  labelRadius: -35,
  labelText: '[[percents]]%',
  dataProvider: [],
  legend: {
    maxColumns: 1,
    width: 270,
    valueWidth: 100,
    labelWidth: 100,
    valueText: ''
  },
  valueField: '',
  titleField: '',
  outlineAlpha: 0.4,
  depth3D: 15,
  balloonText: '[[title]]<br><span style="font-size:14px"><b>[[value]]</b> ([[percents]]%)</span>',
  angle: 30,
  export: {
    enabled: true
  },
  height: 400
  // width: 270
};

var SERIALCHART_CONFIG = {
  type: 'serial',
  theme: 'light',
  marginTop: 0,
  marginRight: 10,
  dataProvider: [],
  legend: {
    // maxColumns: 2,
    // width: 270,
    // valueWidth: 100,
    // labelWidth: 100
  },
  backgroundColor: '#ffffff',
  graphs: [],
  chartScrollbar: {
    color: '#888888',
    scrollbarHeight: 55,
    backgroundAlpha: 0,
    selectedBackgroundAlpha: 0.1,
    selectedBackgroundColor: '#888888',
    autoGridCount: true
  },
  categoryField: '',
  export: {
    enabled: true
  },
  valueAxes: [{
    labelFunction: function labelFunction(value) {
      return (0, _numeral2.default)(value).format('0.0a');
    }
  }],
  height: 400
  // width: 270
};

var getPieChartConfig = function getPieChartConfig(dataProvider, xAxisField, yAxisFields) {
  return Object.assign({}, PIECHART_CONFIG, {
    dataProvider: dataProvider,
    valueField: yAxisFields[0],
    titleField: xAxisField
  });
};

// const addLineTrace = (valueField, type) => ({
//   balloonText:
//     '[[category]]<br><b><span style="font-size:14px;">[[value]]</span></b>',
//   bullet: 'round',
//   bulletSize: 8,
//   title: valueField.capitalizeFirstLetter(),
//   lineThickness: 2,
//   type,
//   valueField
// });

// const addColumnTrace = (valueField, type) => ({
//   balloonText:
//     '[[category]]<br><b><span style="font-size:14px;">[[value]]</span></b>',
//   fillAlphas: 0.9,
//   lineAlpha: 0.2,
//   title: valueField.capitalizeFirstLetter(),
//   type,
//   valueField
// });

var getSerialChartConfig = function getSerialChartConfig(dataProvider, xAxisField, yAxisFields, type) {
  var height = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 400;
  var marginTop = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;

  var config = Object.assign({}, SERIALCHART_CONFIG, {
    dataProvider: dataProvider,
    categoryField: xAxisField,
    graphs: [],
    marginTop: marginTop,
    height: height
  });

  yAxisFields.forEach(function (valueField, i) {
    var trace = {
      balloonText: '[[category]]<br><b><span style="font-size:14px;">[[value]]</span></b>',
      title: valueField.capitalizeFirstLetter(),
      lineThickness: 2,
      type: type,
      valueField: valueField
    };
    trace.id = 'g' + i;
    config.graphs.push(trace);
  });
  return config;
};

var getLineChartConfig = function getLineChartConfig(dataProvider, xAxisField, yAxisFields) {
  var config = getSerialChartConfig(dataProvider, xAxisField, yAxisFields, 'smoothedLine');
  config.graphs.forEach(function (item) {
    item.bullet = 'round';
    item.bulletSize = 8;
  });
  return config;
};

var getBarChartConfig = function getBarChartConfig(dataProvider, xAxisField, yAxisFields, depth3D, angle, rotate, height, marginTop) {
  var config = getSerialChartConfig(dataProvider, xAxisField, yAxisFields, 'column', height, marginTop);
  config.depth3D = depth3D;
  config.angle = angle;
  config.graphs.forEach(function (item) {
    item.fillAlphas = 0.9;
    item.lineAlpha = 0.2;
  });
  config.rotate = rotate;
  config.valueAxes[0].stackType = '3d';
  return config;
};

var getVBarChartConfig = function getVBarChartConfig(dataProvider, xAxisField, yAxisFields) {
  return getBarChartConfig(dataProvider, xAxisField, yAxisFields, 60, 30, false);
};

var getHBarChartConfig = function getHBarChartConfig(dataProvider, xAxisField, yAxisFields) {
  return getBarChartConfig(dataProvider, xAxisField, yAxisFields, 20, 30, true, 400, 20);
};

var CONFIG_MAP = exports.CONFIG_MAP = (_CONFIG_MAP = {}, _defineProperty(_CONFIG_MAP, _types2.default.LINECHART, getLineChartConfig), _defineProperty(_CONFIG_MAP, _types2.default.PIECHART, getPieChartConfig), _defineProperty(_CONFIG_MAP, _types2.default.VBARCHART, getVBarChartConfig), _defineProperty(_CONFIG_MAP, _types2.default.HBARCHART, getHBarChartConfig), _CONFIG_MAP);