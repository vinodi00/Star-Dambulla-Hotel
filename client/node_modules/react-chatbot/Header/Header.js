'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _Header = require('./Header.css');

var _Header2 = _interopRequireDefault(_Header);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/** Header component for the Chat window */
var Header = function (_PureComponent) {
  _inherits(Header, _PureComponent);

  function Header() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Header);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Header.__proto__ || Object.getPrototypeOf(Header)).call.apply(_ref, [this].concat(args))), _this), _this.handleOnMinimise = function (event) {
      event.stopPropagation();
      _this.props.onMinimise(0);
    }, _this.handleOnMaximise = function (event) {
      event.stopPropagation();
      if (_this.props.isDocked) {
        _this.props.onMaximise(1);
      }
    }, _this.handleOnStretch = function (event) {
      event.stopPropagation();
      _this.props.onStretch(2);
    }, _this.handleOnRestore = function (event) {
      event.stopPropagation();
      _this.props.onRestore(1);
    }, _this.handleOnBack = function (event) {
      event.stopPropagation();
      _this.props.onBack();
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Header, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          title = _props.title,
          isDocked = _props.isDocked,
          showBackIcon = _props.showBackIcon,
          windowState = _props.windowState,
          isZoomSupported = _props.isZoomSupported;

      return _react2.default.createElement(
        'div',
        {
          className: (0, _classnames2.default)(_Header2.default.header, _defineProperty({}, '' + _Header2.default.defaultCursor, !isDocked)),
          onClick: this.handleOnMaximise
        },
        _react2.default.createElement(
          'div',
          {
            className: (0, _classnames2.default)(_Header2.default.backIcon, _defineProperty({}, '' + _Header2.default.hideIcon, !showBackIcon || isDocked)),
            onClick: this.handleOnBack
          },
          '←'
        ),
        title,
        _react2.default.createElement(
          'div',
          {
            className: (0, _classnames2.default)(_Header2.default.minimiseIcon, _defineProperty({}, '' + _Header2.default.hideIcon, isDocked)),
            onClick: this.handleOnMinimise
          },
          '–'
        ),
        _react2.default.createElement(
          'div',
          {
            className: (0, _classnames2.default)(_Header2.default.strechIcon, _defineProperty({}, '' + _Header2.default.hideIcon, !isZoomSupported || isDocked || windowState === 2)),
            onClick: this.handleOnStretch
          },
          '✠'
        ),
        _react2.default.createElement(
          'div',
          {
            className: (0, _classnames2.default)(_Header2.default.restoreIcon, _defineProperty({}, '' + _Header2.default.hideIcon, !isZoomSupported || isDocked || windowState === 1)),
            onClick: this.handleOnRestore
          },
          '❐'
        )
      );
    }
  }]);

  return Header;
}(_react.PureComponent);

Header.displayName = 'Header';

Header.propTypes = {
  /** Title for the chat window */
  title: _propTypes2.default.string.isRequired,
  /** Handler to handle minimise of chat window */
  onMinimise: _propTypes2.default.func.isRequired,
  /** Handler to handle maximise of chat window */
  onMaximise: _propTypes2.default.func.isRequired,
  /** Handler to going back to categories selection view from chatting section minimise of chat window */
  onBack: _propTypes2.default.func.isRequired,
  /** Indicates the present state of chat window like minimise/maximise/zoom... */
  windowState: _propTypes2.default.number.isRequired,
  /** Indicates whether the zoom capability needs to be supported by the chat window */
  isZoomSupported: _propTypes2.default.bool,
  /** Handler to handle stretch/zoom of chat window. Required when isZoomSupported is set. */
  onStretch: _propTypes2.default.func,
  /** Handler to handle restoring to normal size(zoom-out) of chat window. Required when isZoomSupported is set. */
  onRestore: _propTypes2.default.func,
  /** Indicates whether chat window is minimised or not */
  isDocked: _propTypes2.default.bool,
  /** Indicator to show back icon or not */
  showBackIcon: _propTypes2.default.bool
};

Header.defaultProps = {
  isDocked: true,
  showBackIcon: false,
  isZoomSupported: false
};

exports.default = Header;