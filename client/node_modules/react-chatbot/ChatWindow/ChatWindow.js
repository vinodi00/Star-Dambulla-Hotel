'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _ChatMsg = require('../ChatMsg');

var _ChatMsg2 = _interopRequireDefault(_ChatMsg);

var _Loader = require('../Loader');

var _Loader2 = _interopRequireDefault(_Loader);

var _Header = require('../Header');

var _Header2 = _interopRequireDefault(_Header);

var _TextInputForm = require('../TextInputForm');

var _TextInputForm2 = _interopRequireDefault(_TextInputForm);

var _CategoryCard = require('../CategoryCard');

var _CategoryCard2 = _interopRequireDefault(_CategoryCard);

var _ChatMsgConditionalFunc = require('./ChatMsgConditionalFunc');

var _ChatWindow = require('./ChatWindow.css');

var _ChatWindow2 = _interopRequireDefault(_ChatWindow);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* global setTimeout */


/** ChatWindow component with default config and capability to handle user input and bot responses */
var ChatWindow = function (_PureComponent) {
  _inherits(ChatWindow, _PureComponent);

  function ChatWindow() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, ChatWindow);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ChatWindow.__proto__ || Object.getPrototypeOf(ChatWindow)).call.apply(_ref, [this].concat(args))), _this), _this.renderMessages = function (messages, selfIcon, botIcon, determineTypeComp, showSelfAvatar, onSuggestionClick) {
      return messages.map(function (message, i) {
        var msgProp = Object.assign({}, message, {
          selfIcon: selfIcon,
          botIcon: botIcon,
          determineTypeComp: determineTypeComp,
          showSelfAvatar: showSelfAvatar
        });
        return _react2.default.createElement(_ChatMsg2.default, Object.assign({}, msgProp, { key: i, onClickHandler: onSuggestionClick }));
      });
    }, _this.handleOnUserInput = function (userInput) {
      return _this.props.onUserInput(userInput);
    }, _this.renderContent = function (props) {
      var messages = props.messages,
          selfIcon = props.selfIcon,
          showSelfAvatar = props.showSelfAvatar,
          botIcon = props.botIcon,
          categories = props.categories,
          showCategories = props.showCategories,
          onCategorySelect = props.onCategorySelect,
          determineTypeComp = props.determineTypeComp,
          onSuggestionClick = props.onSuggestionClick;

      return showCategories ? _react2.default.createElement(
        'div',
        { className: _ChatWindow2.default.categoriesWrapper },
        categories.map(function (item) {
          return _react2.default.createElement(_CategoryCard2.default, {
            key: item.key,
            className: (0, _classnames2.default)(item.className, _ChatWindow2.default.categoryCard),
            name: item.name,
            shortName: item.shortName,
            iconClass: item.iconClass,
            onClick: onCategorySelect,
            value: item.key,
            bgColor: item.bgColor,
            textColor: item.textColor,
            iconColor: item.iconColor
          });
        })
      ) : _react2.default.createElement(
        'div',
        { className: _ChatWindow2.default.chat },
        _react2.default.createElement(
          'div',
          {
            className: _ChatWindow2.default.chatMsgsContainer,
            ref: function ref(chatMsgsContainer) {
              return _this.chatMsgsContainer = chatMsgsContainer;
            }
          },
          _this.renderMessages(messages, selfIcon, botIcon, determineTypeComp, showSelfAvatar, onSuggestionClick),
          _this.props.showLoaderIcon && _react2.default.createElement(_Loader2.default, null)
        ),
        _react2.default.createElement(_TextInputForm2.default, { onUserInput: _this.handleOnUserInput })
      );
    }, _this.render = function () {
      var _this$props = _this.props,
          onMinimiseMaximise = _this$props.onMinimiseMaximise,
          chatWindowState = _this$props.chatWindowState,
          showCategories = _this$props.showCategories,
          onBack = _this$props.onBack,
          appName = _this$props.appName,
          title = _this$props.title;

      setTimeout(function () {
        if (_this.chatMsgsContainer && _this.chatMsgsContainer.scrollHeight > _this.chatMsgsContainer.offsetHeight) {
          _this.chatMsgsContainer.scrollTop = _this.chatMsgsContainer.scrollHeight - _this.chatMsgsContainer.offsetHeight;
        }
      }, 0);
      return _react2.default.createElement(
        'div',
        { className: _ChatWindow2.default.chatWrapper },
        _react2.default.createElement(_Header2.default, {
          title: !showCategories ? appName.shortName : title,
          onMinimise: onMinimiseMaximise,
          onMaximise: onMinimiseMaximise,
          onStretch: onMinimiseMaximise,
          onRestore: onMinimiseMaximise,
          isDocked: chatWindowState === 0,
          showBackIcon: !showCategories,
          onBack: onBack,
          windowState: chatWindowState
        }),
        _this.renderContent(_this.props)
      );
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  return ChatWindow;
}(_react.PureComponent);

ChatWindow.displayName = 'ChatWindow';

ChatWindow.propTypes = {
  /** Handler for handling user input */
  onUserInput: _propTypes2.default.func.isRequired,
  /** Chat messages including both bot response and user input */
  messages: _propTypes2.default.array.isRequired,
  /** User's avatar icon */
  selfIcon: _propTypes2.default.string.isRequired,
  /** Bot avatar icon */
  botIcon: _propTypes2.default.string.isRequired,
  /** Handler to handle minimise, maximise & zoom of chat window */
  onMinimiseMaximise: _propTypes2.default.func.isRequired,
  /** Handler for handling category selection */
  onCategorySelect: _propTypes2.default.func.isRequired,
  /** Handler to going back to categories selection view from chatting section minimise of chat window */
  onBack: _propTypes2.default.func.isRequired,
  /** Indicates the present state of chat window like minimise/maximise/zoom... */
  chatWindowState: _propTypes2.default.oneOf([0, 1, 2]).isRequired,
  /** Title for the chat window when no categories are selected */
  title: _propTypes2.default.string.isRequired,
  /** Name of the application/selected category name */
  appName: _propTypes2.default.object,
  /** Indicates whether the zoom capability needs to be supported by the chat window */
  isZoomSupported: _propTypes2.default.bool,
  /** Handler for handling suggestion selection from the chat response */
  onSuggestionClick: _propTypes2.default.func,
  /** Function which determines the type of components to be used for the given response */
  determineTypeComp: _propTypes2.default.func,
  /** Indicator for showing/hiding loader icon */
  showLoaderIcon: _propTypes2.default.bool,
  /** Indicator for showing/hiding categories selection view */
  showCategories: _propTypes2.default.bool,
  /** List of categories available/supported by the app  */
  categories: _propTypes2.default.array,
  /** Indicator for showing/hiding user's self avatar icon */
  showSelfAvatar: _propTypes2.default.bool
};

ChatWindow.defaultProps = {
  showLoaderIcon: false,
  showCategories: true,
  showSelfAvatar: false,
  isZoomSupported: false,
  categories: [],
  determineTypeComp: _ChatMsgConditionalFunc.chatMsgConditionFunc,
  onSuggestionClick: function onSuggestionClick() {}
};

exports.default = ChatWindow;