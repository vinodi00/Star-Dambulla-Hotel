'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _CategoryCard = require('./CategoryCard.css');

var _CategoryCard2 = _interopRequireDefault(_CategoryCard);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/** Component to show various categories the chatbot can handle in the form of clickable cards */
var CategoryCard = function (_PureComponent) {
  _inherits(CategoryCard, _PureComponent);

  function CategoryCard() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, CategoryCard);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = CategoryCard.__proto__ || Object.getPrototypeOf(CategoryCard)).call.apply(_ref, [this].concat(args))), _this), _this.handleOnClick = function () {
      return _this.props.onClick({
        name: _this.props.name,
        key: _this.props.value,
        shortName: _this.props.shortName || _this.props.name
      });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(CategoryCard, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          name = _props.name,
          iconClass = _props.iconClass,
          bgColor = _props.bgColor,
          textColor = _props.textColor,
          iconColor = _props.iconColor,
          className = _props.className;

      return _react2.default.createElement(
        'div',
        {
          onClick: this.handleOnClick,
          className: (0, _classnames2.default)(className, _CategoryCard2.default.card),
          style: {
            backgroundColor: bgColor,
            borderColor: bgColor,
            color: textColor
          }
        },
        _react2.default.createElement('div', {
          className: (0, _classnames2.default)(_CategoryCard2.default.icon, iconClass),
          style: { borderColor: bgColor, color: iconColor }
        }),
        _react2.default.createElement(
          'div',
          { className: _CategoryCard2.default.title },
          name
        )
      );
    }
  }]);

  return CategoryCard;
}(_react.PureComponent);

CategoryCard.displayName = 'CategoryCard';

CategoryCard.propTypes = {
  /** Name of the Category */
  name: _propTypes2.default.string.isRequired,
  /** Short name of the Category, which will be used to disply in header region on category selection */
  shortName: _propTypes2.default.string,
  /** Unique id/type for the category */
  value: _propTypes2.default.string.isRequired,
  /** Handler to handling category selection */
  onClick: _propTypes2.default.func.isRequired,
  /** CSS Classname for category icon*/
  iconClass: _propTypes2.default.string.isRequired,
  /** Color code for category icon */
  iconColor: _propTypes2.default.string.isRequired,
  /** Custom CSS class for handling the card look */
  className: _propTypes2.default.string,
  /** Background color code for the category card */
  bgColor: _propTypes2.default.string,
  /** Color code for text */
  textColor: _propTypes2.default.string
};

CategoryCard.defaultProps = {
  bgColor: '#ffffff',
  textColor: '#000000'
};

exports.default = CategoryCard;