'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _TextInputForm = require('./TextInputForm.css');

var _TextInputForm2 = _interopRequireDefault(_TextInputForm);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/** Component which takes the users input and provides an mechanism for handling it */
var TextInputForm = function (_PureComponent) {
  _inherits(TextInputForm, _PureComponent);

  function TextInputForm(props) {
    _classCallCheck(this, TextInputForm);

    var _this = _possibleConstructorReturn(this, (TextInputForm.__proto__ || Object.getPrototypeOf(TextInputForm)).call(this, props));

    _this.handleOnClick = function () {
      _this.props.onUserInput(_this.state.value);
      _this.setState({
        value: ''
      });
    };

    _this.handleOnChange = function (event) {
      return _this.setState({ value: event.target.value });
    };

    _this.handleOnKeyPress = function (event) {
      if (event.key === 'Enter') {
        _this.handleOnClick();
      }
    };

    _this.state = {
      value: ''
    };
    return _this;
  }

  _createClass(TextInputForm, [{
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'div',
        { className: _TextInputForm2.default.wrapper },
        _react2.default.createElement('input', {
          className: _TextInputForm2.default.textInput,
          value: this.state.value,
          type: 'text',
          placeholder: 'Type here . . .',
          onChange: this.handleOnChange,
          onKeyPress: this.handleOnKeyPress
        }),
        _react2.default.createElement(
          'button',
          {
            className: (0, _classnames2.default)(_TextInputForm2.default.sendBtn, _defineProperty({}, '' + _TextInputForm2.default.disabled, this.state.value === '')),
            onClick: this.handleOnClick,
            disabled: this.state.value === ''
          },
          _react2.default.createElement('div', { className: _TextInputForm2.default.upArrow })
        )
      );
    }
  }]);

  return TextInputForm;
}(_react.PureComponent);

TextInputForm.displayName = 'TextInputForm';

TextInputForm.propTypes = {
  /** Handler for handling user input */
  onUserInput: _propTypes2.default.func.isRequired
};

exports.default = TextInputForm;